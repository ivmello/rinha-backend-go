CREATE UNLOGGED TABLE IF NOT EXISTS accounts (
  id INTEGER PRIMARY KEY,
  account_limit INTEGER NOT NULL,
  balance INTEGER NOT NULL DEFAULT 0
);

CREATE UNLOGGED TABLE IF NOT EXISTS transactions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  account_id INTEGER NOT NULL,
  amount INTEGER NOT NULL,
  operation CHAR(1) NOT NULL,
  description VARCHAR(10) NOT NULL,
  created_at TIMESTAMP NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_account_id ON transactions (account_id);

CREATE EXTENSION IF NOT EXISTS pg_prewarm;
SELECT pg_prewarm('accounts');
SELECT pg_prewarm('transactions');

CREATE TYPE json_result AS (
  body json
);

CREATE OR REPLACE FUNCTION create_transaction(p_account_id INT, p_amount INT, p_operation CHAR, p_description CHAR(10))
RETURNS json_result as $$
DECLARE
  v_balance INT;
  v_account_limit INT;
  result json_result;
BEGIN
  SELECT balance, account_limit INTO v_balance, v_account_limit
  FROM accounts
  WHERE id = p_account_id
  FOR UPDATE;

  IF p_operation = 'd' AND ((v_balance - p_amount) < (-1 * v_account_limit)) THEN
    RAISE EXCEPTION 'INSUFFICIENT_FUNDS';
    RETURN result;
  END IF;
  
  INSERT INTO transactions (account_id,amount,operation,description,created_at)
  VALUES (p_account_id, p_amount, p_operation, p_description, now());

  UPDATE accounts 
  SET balance = CASE 
    WHEN p_operation = 'c' THEN balance + p_amount
    WHEN p_operation = 'd' THEN balance - p_amount
    ELSE balance
  END
  WHERE id = p_account_id
  RETURNING balance INTO v_balance;

  SELECT json_build_object(
    'saldo', v_balance,
    'limite', v_account_limit
  ) into result.body;
  RETURN result;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION get_balance(p_account_id int)
RETURNS json_result
LANGUAGE plpgsql
AS $$
DECLARE
    result json_result;
    v_balance numeric;
    v_account_limit numeric;
BEGIN
  SELECT balance, account_limit INTO v_balance, v_account_limit
  FROM accounts
  WHERE id = p_account_id;

  SELECT json_build_object(
    'saldo', json_build_object(
      'total', v_balance,
      'data_extrato', TO_CHAR(now(), 'YYYY-MM-DD HH:MI:SS.US'),
      'limite', v_account_limit
    ),
    'ultimas_transacoes', COALESCE((
      SELECT json_agg(row_to_json(t)) FROM (
        SELECT amount as valor, operation as tipo, description as crecricao, TO_CHAR(created_at, 'YYYY-MM-DD HH:MI:SS.US') as realizado_em
        FROM transactions
        WHERE account_id = p_account_id
        ORDER BY created_at DESC
        LIMIT 10
      ) t
    ), '[]')
  ) INTO result.body;
  RETURN result;
END;
$$;

DO $$
BEGIN
  INSERT INTO accounts (id, account_limit)
  VALUES
    (1, 100000),
    (2, 80000),
    (3, 1000000),
    (4, 10000000),
    (5, 500000);
END;
$$